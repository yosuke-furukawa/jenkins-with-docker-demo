<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/yosuke-furukawa/grunt-jsx.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanCheckout/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env bash
set -e

LANGUAGE=`cat ${WORKSPACE}/.travis.yml | shyaml get-value language`
VERSIONS_TEMP=`cat ${WORKSPACE}/.travis.yml | shyaml get-values ${LANGUAGE}`
BEFORE_SCRIPT=`cat ${WORKSPACE}/.travis.yml | shyaml get-values-0 before_script | perl -pe 's/\0/ \&\& /g' | perl -pe 's/\&\& $//g'`
AFTER_SCRIPT=`cat ${WORKSPACE}/.travis.yml | shyaml get-values-0 after_script | perl -pe 's/\0/ \&\& /g' | perl -pe 's/\&\& $//g'`
BEFORE_INSTALL=`cat ${WORKSPACE}/.travis.yml | shyaml get-values-0 before_script | perl -pe 's/\0/ \&\& /g' | perl -pe 's/\&\& $//g'`

VERSIONS=(${VERSIONS_TEMP})

for ((i = 0; i < "${#VERSIONS[@]}"; i++)); do
    VERSION="${VERSIONS[$i]}"
    _WORKSPACE="${WORKSPACE}.${BUILD_NUMBER}.${VERSION}"
    cp -R "${WORKSPACE}" "${_WORKSPACE}"

    CONTAINER_ID=$(docker run -d -v "${_WORKSPACE}":/workspace -w /workspace -u worker -e "HOME=/home/worker" jenkins-with-docker/nodejs "$(cat <<EOL
export PATH=/home/worker/.nodebrew/current/bin:$PATH
nodebrew use "${VERSION}"
${BEFORE_INSTALL}
npm install
${BEFORE_SCRIPT}
npm test
${AFTER_SCRIPT}
EOL
)"
)
    echo "-----> Started Build: ${VERSION}"
    echo "CONTAINER_ID: ${CONTAINER_ID}"
    echo "WORKSPACE: ${_WORKSPACE}"
    echo

    sleep 3

    CONTAINER_IDS="${CONTAINER_IDS} ${CONTAINER_ID}"
done

EXIT_STATUSES="$(docker wait ${CONTAINER_IDS})"

echo "-----> Results"

CONTAINER_IDS_ARRAY=(`echo ${CONTAINER_IDS}`)
IS_FAILED=0
i=0; for EXIT_STATUS in ${EXIT_STATUSES}; do
    STARTED_AT=$(docker inspect "${CONTAINER_IDS_ARRAY[$i]}" | jq -r ".[0].State.StartedAt")
    FINISHED_AT=$(docker inspect "${CONTAINER_IDS_ARRAY[$i]}" | jq -r ".[0].State.FinishedAt")
    TIME="$(expr `date -d "${FINISHED_AT}" +%s` - `date -d "${STARTED_AT}" +%s`)"

    if [[ "${EXIT_STATUS}" > 0 ]]; then
        echo -e "\e[1;31m✘\e[m	${VERSIONS[$i]}	[${TIME} sec]"
    else
        echo -e "\e[1;32m✔\e[m	${VERSIONS[$i]}	[${TIME} sec]"
        IS_FAILED=1
    fi

    i=$((i + 1))
done

i=0; for CONTAINER_ID in ${CONTAINER_IDS[@]}; do
    echo
    echo "---> ${VERSIONS[$i]}"
    docker logs ${CONTAINER_ID}

    i=$((i + 1))
done

exit ${IS_FAILED}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.3.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>
